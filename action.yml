name: 'Find changed submodules'
description: 'Find out which submodule has changed'
inputs:
  github-token:
    description: GitHub token
    default: ''
  package:
    description: Which package to build
    default: ''
outputs:
  repo_url:
    description: "URL of the changed submodule"
    value: ${{ steps.git-log.outputs.repo_url }}
  repo_name:
    description: "Name of the changed submodule"
    value: ${{ steps.git-log.outputs.repo_name }}
  repo_owner:
    description: "Github user or organization of the submodule"
    value: ${{ steps.git-log.outputs.repo_owner }}
  repo_commit:
    description: "Commit of the changed submodule"
    value: ${{ steps.git-log.outputs.repo_commit }}
  repo_subdir:
    description: "Subdirectory of the R package"
    value: ${{ steps.git-log.outputs.repo_subdir }}
  repo_branch:
    description: "Which tag or branch we are tracking"
    value: ${{ steps.git-log.outputs.repo_branch }}
  repo_registered:
    description: "If the R package is in the universe registry (ie not a remote)"
    value: ${{ steps.git-log.outputs.repo_registered }}
  universe_app:
    description: "Does the user have the GitHub app installed"
    value: ${{ steps.git-log.outputs.universe_app }}
  maintainer_login:
    description: "Package maintainer GitHub username"
    value: ${{ steps.find-user.outputs.maintainer_login }}
runs:
  using: "composite"
  steps: 
    - id: git-log
      shell: bash
      run: |
        REPO_NAME="${{inputs.package}}"
        if [ -z "$REPO_NAME" ]; then
        REPO_NAME=$(git log --pretty=format: --name-only HEAD^.. | grep "^[^.]")
        fi
        echo "New package: ${REPO_NAME}"
        git submodule init ${REPO_NAME}
        REPO_URL=$(git config --list | grep "submodule.${REPO_NAME}.url=" | cut -d'=' -f2)
        REPO_OWNER=$(basename $(dirname "$REPO_URL"))
        REPO_COMMIT=$(git submodule status $REPO_NAME | awk '{print $1}' | sed 's/^[^0-9a-z]*//')
        REPO_SUBDIR=$(git config -f .gitmodules --get "submodule.${REPO_NAME}.subdir" || true)
        REPO_BRANCH=$(git config -f .gitmodules --get "submodule.${REPO_NAME}.branch" || true)
        REPO_REGISTERED=$(git config -f .gitmodules --get "submodule.${REPO_NAME}.registered" || true)
        echo ::set-output name=repo_url::$REPO_URL
        echo ::set-output name=repo_name::$REPO_NAME
        echo ::set-output name=repo_owner::$REPO_OWNER
        echo ::set-output name=repo_commit::$REPO_COMMIT
        echo ::set-output name=repo_subdir::$REPO_SUBDIR
        echo ::set-output name=repo_branch::$REPO_BRANCH
        echo ::set-output name=repo_registered::$REPO_REGISTERED
        if [ -f ".ghapp" ] && [ "$REPO_OWNER" = "$(basename $PWD)" ]; then
        echo ::set-output name=universe_app::true
        fi
        echo "GIT_SUBMODULE=${REPO_NAME}" >> $GITHUB_ENV
    - id: find-user
      shell: bash
      run: |
        if [ "${{inputs.github-token}}" ]; then
          AUTH_HEADER="-H 'Authorization: token ${{inputs.github-token}}'"
        fi
        LOGIN=$(curl $AUTH_HEADER -s https://api.github.com/repos/${{github.repository}}/commits?path=${GIT_SUBMODULE} | jq -r '.[0].author.login')
        if [ "$LOGIN" ] && [ "$LOGIN" != "null" ]; then
          echo "Package maintainer github login: $LOGIN"
          echo "::set-output name=maintainer_login::$LOGIN"
        fi
